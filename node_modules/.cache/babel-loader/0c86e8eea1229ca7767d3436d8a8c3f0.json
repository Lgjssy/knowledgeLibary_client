{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { defaultOptions, renderAsync } from \"docx-preview\";\nconsole.log(defaultOptions);\nexport default {\n  name: 'DocxPreview',\n\n  data() {\n    return {\n      docxOptions: {\n        className: \"kaimo-docx-666\",\n        // string：默认和文档样式类的类名/前缀\n        inWrapper: true,\n        // boolean：启用围绕文档内容的包装器渲染\n        ignoreWidth: false,\n        // boolean：禁用页面的渲染宽度\n        ignoreHeight: false,\n        // boolean：禁止渲染页面高度\n        ignoreFonts: false,\n        // boolean：禁用字体渲染\n        breakPages: true,\n        // boolean：在分页符上启用分页\n        ignoreLastRenderedPageBreak: true,\n        // boolean：在 lastRenderedPageBreak 元素上禁用分页\n        experimental: false,\n        // boolean：启用实验功能（制表符停止计算）\n        trimXmlDeclaration: true,\n        // boolean：如果为true，解析前会从 xml 文档中移除 xml 声明\n        useBase64URL: false,\n        // boolean：如果为true，图片、字体等会转为base 64 URL，否则使用URL.createObjectURL\n        useMathMLPolyfill: false,\n        // boolean：包括用于 chrome、edge 等的 MathML polyfill。\n        showChanges: false,\n        // boolean：启用文档更改的实验性渲染（插入/删除）\n        debug: false // boolean：启用额外的日志记录\n\n      }\n    };\n  },\n\n  methods: {\n    handlePreview() {\n      let file = document.getElementById(\"file\").files[0];\n      console.log(file); // 将file转为buffer\n\n      let fr = new FileReader();\n      fr.readAsArrayBuffer(file);\n      fr.addEventListener(\"loadend\", e => {\n        console.log(\"loadend---->\", e);\n        let buffer = e.target.result;\n        this.docxRender(buffer);\n      }, false);\n    },\n\n    // 渲染docx\n    docxRender(buffer) {\n      let bodyContainer = document.getElementById(\"bodyContainer\");\n      renderAsync(buffer, // Blob | ArrayBuffer | Uint8Array, 可以是 JSZip.loadAsync 支持的任何类型\n      bodyContainer, // HTMLElement 渲染文档内容的元素,\n      null, // HTMLElement, 用于呈现文档样式、数字、字体的元素。如果为 null，则将使用 bodyContainer。\n      this.docxOptions // 配置\n      ).then(res => {\n        console.log(\"res---->\", res);\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;AAWA;AACAA;AACA;EACAC,mBADA;;EAEAC;IACA;MACAC;QACAC,2BADA;QACA;QACAC,eAFA;QAEA;QACAC,kBAHA;QAGA;QACAC,mBAJA;QAIA;QACAC,kBALA;QAKA;QACAC,gBANA;QAMA;QACAC,iCAPA;QAOA;QACAC,mBARA;QAQA;QACAC,wBATA;QASA;QACAC,mBAVA;QAUA;QACAC,wBAXA;QAWA;QACAC,kBAZA;QAYA;QACAC,YAbA,CAaA;;MAbA;IADA;EAiBA,CApBA;;EAqBAC;IACAC;MACA;MACAlB,kBAFA,CAGA;;MACA;MACAmB;MACAA;QACAnB;QACA;QACA;MACA,CAJA,EAIA,KAJA;IAKA,CAZA;;IAaA;IACAoB;MACA;MACAC,YACAC,MADA,EACA;MACAC,aAFA,EAEA;MACA,IAHA,EAGA;MACA,gBAJA,CAIA;MAJA,EAKAC,IALA,CAKAC;QACAzB;MACA,CAPA;IAQA;;EAxBA;AArBA","names":["console","name","data","docxOptions","className","inWrapper","ignoreWidth","ignoreHeight","ignoreFonts","breakPages","ignoreLastRenderedPageBreak","experimental","trimXmlDeclaration","useBase64URL","useMathMLPolyfill","showChanges","debug","methods","handlePreview","fr","docxRender","renderAsync","buffer","bodyContainer","then","res"],"sourceRoot":"src/components/searchComoponents","sources":["notebook.vue"],"sourcesContent":["<template>\r\n  <div class=\"docx-preview-wrap\">\r\n      <h1>kaimo test docx-preview</h1>\r\n      <h4>\r\n          <input type=\"file\" id=\"file\" accept=\".docx\"/>\r\n          <button @click=\"handlePreview\">预览</button>\r\n      </h4>\r\n      <div id=\"bodyContainer\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>import { defaultOptions, renderAsync } from \"docx-preview\";\r\nconsole.log(defaultOptions);\r\nexport default {\r\n  name: 'DocxPreview',\r\n  data () {\r\n      return {\r\n          docxOptions: {\r\n              className: \"kaimo-docx-666\", // string：默认和文档样式类的类名/前缀\r\n              inWrapper:  true, // boolean：启用围绕文档内容的包装器渲染\r\n              ignoreWidth: false, // boolean：禁用页面的渲染宽度\r\n              ignoreHeight: false, // boolean：禁止渲染页面高度\r\n              ignoreFonts: false, // boolean：禁用字体渲染\r\n              breakPages: true, // boolean：在分页符上启用分页\r\n              ignoreLastRenderedPageBreak: true, // boolean：在 lastRenderedPageBreak 元素上禁用分页\r\n              experimental: false, // boolean：启用实验功能（制表符停止计算）\r\n              trimXmlDeclaration: true, // boolean：如果为true，解析前会从 xml 文档中移除 xml 声明\r\n              useBase64URL: false, // boolean：如果为true，图片、字体等会转为base 64 URL，否则使用URL.createObjectURL\r\n              useMathMLPolyfill: false, // boolean：包括用于 chrome、edge 等的 MathML polyfill。\r\n              showChanges: false, // boolean：启用文档更改的实验性渲染（插入/删除）\r\n              debug: false, // boolean：启用额外的日志记录\r\n          }\r\n      };\r\n  },\r\n  methods: {\r\n      handlePreview() {\r\n          let file = document.getElementById(\"file\").files[0];\r\n          console.log(file);\r\n          // 将file转为buffer\r\n          let fr = new FileReader();\r\n          fr.readAsArrayBuffer(file);\r\n          fr.addEventListener(\"loadend\",(e) => {\r\n              console.log(\"loadend---->\", e)\r\n              let buffer = e.target.result;\r\n              this.docxRender(buffer);\r\n          },false);\r\n      },\r\n      // 渲染docx\r\n      docxRender(buffer) {\r\n          let bodyContainer = document.getElementById(\"bodyContainer\");\r\n          renderAsync(\r\n              buffer, // Blob | ArrayBuffer | Uint8Array, 可以是 JSZip.loadAsync 支持的任何类型\r\n              bodyContainer, // HTMLElement 渲染文档内容的元素,\r\n              null, // HTMLElement, 用于呈现文档样式、数字、字体的元素。如果为 null，则将使用 bodyContainer。\r\n              this.docxOptions // 配置\r\n          ).then(res => {\r\n              console.log(\"res---->\", res)\r\n          })\r\n      }\r\n  },\r\n};</script>\r\n"]},"metadata":{},"sourceType":"module"}