{"ast":null,"code":"// based on rc-resize-observer 0.1.3\nimport ResizeObserver from 'resize-observer-polyfill'; // Still need to be compatible with React 15, we use class component here\n\nvar VueResizeObserver = {\n  name: 'ResizeObserver',\n  props: {\n    disabled: Boolean\n  },\n  data: function data() {\n    this.currentElement = null;\n    this.resizeObserver = null;\n    return {\n      width: 0,\n      height: 0\n    };\n  },\n  mounted: function mounted() {\n    this.onComponentUpdated();\n  },\n  updated: function updated() {\n    this.onComponentUpdated();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroyObserver();\n  },\n  methods: {\n    onComponentUpdated: function onComponentUpdated() {\n      var disabled = this.$props.disabled; // Unregister if disabled\n\n      if (disabled) {\n        this.destroyObserver();\n        return;\n      } // Unregister if element changed\n\n\n      var element = this.$el;\n      var elementChanged = element !== this.currentElement;\n\n      if (elementChanged) {\n        this.destroyObserver();\n        this.currentElement = element;\n      }\n\n      if (!this.resizeObserver && element) {\n        this.resizeObserver = new ResizeObserver(this.onResize);\n        this.resizeObserver.observe(element);\n      }\n    },\n    onResize: function onResize(entries) {\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n      /**\r\n       * Resize observer trigger when content size changed.\r\n       * In most case we just care about element size,\r\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\r\n       */\n\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (this.width !== fixedWidth || this.height !== fixedHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight\n        };\n        this.width = fixedWidth;\n        this.height = fixedHeight;\n        this.$emit('resize', size);\n      }\n    },\n    destroyObserver: function destroyObserver() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    }\n  },\n  render: function render() {\n    return this.$slots['default'][0];\n  }\n};\nexport default VueResizeObserver;","map":{"version":3,"names":["ResizeObserver","VueResizeObserver","name","props","disabled","Boolean","data","currentElement","resizeObserver","width","height","mounted","onComponentUpdated","updated","beforeDestroy","destroyObserver","methods","$props","element","$el","elementChanged","onResize","observe","entries","target","_target$getBoundingCl","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","size","$emit","disconnect","render","$slots"],"sources":["D:/Desktop/大三上/实训/项目2.0/xbr/前端/node_modules/ant-design-vue/es/vc-resize-observer/index.js"],"sourcesContent":["// based on rc-resize-observer 0.1.3\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\n// Still need to be compatible with React 15, we use class component here\r\nvar VueResizeObserver = {\r\n  name: 'ResizeObserver',\r\n  props: {\r\n    disabled: Boolean\r\n  },\r\n  data: function data() {\r\n    this.currentElement = null;\r\n    this.resizeObserver = null;\r\n    return {\r\n      width: 0,\r\n      height: 0\r\n    };\r\n  },\r\n  mounted: function mounted() {\r\n    this.onComponentUpdated();\r\n  },\r\n  updated: function updated() {\r\n    this.onComponentUpdated();\r\n  },\r\n  beforeDestroy: function beforeDestroy() {\r\n    this.destroyObserver();\r\n  },\r\n\r\n  methods: {\r\n    onComponentUpdated: function onComponentUpdated() {\r\n      var disabled = this.$props.disabled;\r\n\r\n      // Unregister if disabled\r\n\r\n      if (disabled) {\r\n        this.destroyObserver();\r\n        return;\r\n      }\r\n\r\n      // Unregister if element changed\r\n      var element = this.$el;\r\n      var elementChanged = element !== this.currentElement;\r\n      if (elementChanged) {\r\n        this.destroyObserver();\r\n        this.currentElement = element;\r\n      }\r\n\r\n      if (!this.resizeObserver && element) {\r\n        this.resizeObserver = new ResizeObserver(this.onResize);\r\n        this.resizeObserver.observe(element);\r\n      }\r\n    },\r\n    onResize: function onResize(entries) {\r\n      var target = entries[0].target;\r\n\r\n      var _target$getBoundingCl = target.getBoundingClientRect(),\r\n          width = _target$getBoundingCl.width,\r\n          height = _target$getBoundingCl.height;\r\n      /**\r\n       * Resize observer trigger when content size changed.\r\n       * In most case we just care about element size,\r\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\r\n       */\r\n\r\n\r\n      var fixedWidth = Math.floor(width);\r\n      var fixedHeight = Math.floor(height);\r\n\r\n      if (this.width !== fixedWidth || this.height !== fixedHeight) {\r\n        var size = { width: fixedWidth, height: fixedHeight };\r\n        this.width = fixedWidth;\r\n        this.height = fixedHeight;\r\n        this.$emit('resize', size);\r\n      }\r\n    },\r\n    destroyObserver: function destroyObserver() {\r\n      if (this.resizeObserver) {\r\n        this.resizeObserver.disconnect();\r\n        this.resizeObserver = null;\r\n      }\r\n    }\r\n  },\r\n\r\n  render: function render() {\r\n    return this.$slots['default'][0];\r\n  }\r\n};\r\n\r\nexport default VueResizeObserver;"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,0BAA3B,C,CAEA;;AACA,IAAIC,iBAAiB,GAAG;EACtBC,IAAI,EAAE,gBADgB;EAEtBC,KAAK,EAAE;IACLC,QAAQ,EAAEC;EADL,CAFe;EAKtBC,IAAI,EAAE,SAASA,IAAT,GAAgB;IACpB,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,OAAO;MACLC,KAAK,EAAE,CADF;MAELC,MAAM,EAAE;IAFH,CAAP;EAID,CAZqB;EAatBC,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B,KAAKC,kBAAL;EACD,CAfqB;EAgBtBC,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B,KAAKD,kBAAL;EACD,CAlBqB;EAmBtBE,aAAa,EAAE,SAASA,aAAT,GAAyB;IACtC,KAAKC,eAAL;EACD,CArBqB;EAuBtBC,OAAO,EAAE;IACPJ,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;MAChD,IAAIR,QAAQ,GAAG,KAAKa,MAAL,CAAYb,QAA3B,CADgD,CAGhD;;MAEA,IAAIA,QAAJ,EAAc;QACZ,KAAKW,eAAL;QACA;MACD,CAR+C,CAUhD;;;MACA,IAAIG,OAAO,GAAG,KAAKC,GAAnB;MACA,IAAIC,cAAc,GAAGF,OAAO,KAAK,KAAKX,cAAtC;;MACA,IAAIa,cAAJ,EAAoB;QAClB,KAAKL,eAAL;QACA,KAAKR,cAAL,GAAsBW,OAAtB;MACD;;MAED,IAAI,CAAC,KAAKV,cAAN,IAAwBU,OAA5B,EAAqC;QACnC,KAAKV,cAAL,GAAsB,IAAIR,cAAJ,CAAmB,KAAKqB,QAAxB,CAAtB;QACA,KAAKb,cAAL,CAAoBc,OAApB,CAA4BJ,OAA5B;MACD;IACF,CAvBM;IAwBPG,QAAQ,EAAE,SAASA,QAAT,CAAkBE,OAAlB,EAA2B;MACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,CAAD,CAAP,CAAWC,MAAxB;;MAEA,IAAIC,qBAAqB,GAAGD,MAAM,CAACE,qBAAP,EAA5B;MAAA,IACIjB,KAAK,GAAGgB,qBAAqB,CAAChB,KADlC;MAAA,IAEIC,MAAM,GAAGe,qBAAqB,CAACf,MAFnC;MAGA;AACN;AACA;AACA;AACA;;;MAGM,IAAIiB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWpB,KAAX,CAAjB;MACA,IAAIqB,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWnB,MAAX,CAAlB;;MAEA,IAAI,KAAKD,KAAL,KAAekB,UAAf,IAA6B,KAAKjB,MAAL,KAAgBoB,WAAjD,EAA8D;QAC5D,IAAIC,IAAI,GAAG;UAAEtB,KAAK,EAAEkB,UAAT;UAAqBjB,MAAM,EAAEoB;QAA7B,CAAX;QACA,KAAKrB,KAAL,GAAakB,UAAb;QACA,KAAKjB,MAAL,GAAcoB,WAAd;QACA,KAAKE,KAAL,CAAW,QAAX,EAAqBD,IAArB;MACD;IACF,CA9CM;IA+CPhB,eAAe,EAAE,SAASA,eAAT,GAA2B;MAC1C,IAAI,KAAKP,cAAT,EAAyB;QACvB,KAAKA,cAAL,CAAoByB,UAApB;QACA,KAAKzB,cAAL,GAAsB,IAAtB;MACD;IACF;EApDM,CAvBa;EA8EtB0B,MAAM,EAAE,SAASA,MAAT,GAAkB;IACxB,OAAO,KAAKC,MAAL,CAAY,SAAZ,EAAuB,CAAvB,CAAP;EACD;AAhFqB,CAAxB;AAmFA,eAAelC,iBAAf"},"metadata":{},"sourceType":"module"}